Key words to search for under logcat_main:

- anr
        - Search for "Cmd line:" in ANR_traces.txt file and note the process name at the time of interest
	- ANR in

	  logs are posted at /data/anr/

- panic
        - Kernel Panic: 
             - Unable to handle kernel NULL pointer (bugreport)
             - Kernel panic - not syncing: Fatal exception in interrupt  (bugreport/apanic_console.txt)
             - Internal error (apanic_console.txt)
             - Logcat
               BootReceiver: Copying /data/kernelpanics/ap_kernel_panic_4D545183 to DropBox (SYSTEM_LAST_KMSG)
               BootReceiver: Copying /data/dontpanic/apanic_console to DropBox (APANIC_CONSOLE)
               BootReceiver: Copying /data/dontpanic/apanic_threads to DropBox (APANIC_THREADS)
                         
        - BP Panic:
             - Search for bp_panic entries in logcat_main.*.txt. Logs are then uploaded using [[ADDLINK][MPR]
	       logs under:
	            data\panic\
		    data\panic\apr
	- died
	- alive
	- dead

- force close:
        - Force Close (FC): Search for "thread exiting with uncaught exception" in logcat_main.*.txt
	- uncaught exception
	- thread exiting with uncaught exception
	- exception
	- fatal exception
	- Null pointer exception
	
- Tombstone:
        - Search for "Build fingerprint:" in tombstone_*.txt file and note the process name, lr, pc.
                    In this case you will have in the log: both "code around pc" and "code around lr", stack
        - Build fingerprint
	  for tombstones logs are under \data\tombstones
	  			
- Tombstone of dynamically generated code by JIT
        - dalvik vm uses JIT to generate optimized code at run time and in such cases
	- When the code crashed in the JIT code cache address range, you will see the
		"jit-code-cache" annotation along with the stack traces. Since the code
		generated by the JIT compiler doesn't have the ARM EABI frames, you will
		usually see 1 (ie PC) or 2 (ie LR) frames, but no more than that. 
		
		In this case you will have in the log: "code around pc" or "code around lr", stack and something
		like "/dev/ashmem/dalvik-jit-code-cache"
		
	- Then you will see 80 bytes of memory content dumped around PC and LR,
		respectively. They will provide key information on what went wrong. We will
		need to have a disassembler to decode those values, but instead of writing a
		stand-alone one, we wrote a quick-and-dirty tool located at
		dalvik/tools/gdbjithelper to piggy gdb as a disassembler. 

- died 
- alive
- dead
- uncaught exception
- thread exiting with uncaught exception
- exception
- fatal exception
- fatal
- fail
- kill

	 

- stability scripts trace
	- stabexc
	- [stabexc]

